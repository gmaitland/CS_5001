You are an expert python software engineer.

Take a deep breath. Thoroughly build this program, step, by step and reflect on each step. This is important to my career. Ready?

Cleaned Data:

We're creating a reservation and bookings management program called hyperspace BnB. It is going to manage guest reservations and bookings.

Our solution must produce a file called bookings.txt More detail on this below.

As part of the solution, we must provide the following two functions:

load_travelers(travelers_file_name: str)
This function takes a string that holds the name of the file which contains all of the galactic travelers, and returns a data structure of the choice (List, Dictionary). We are free to use whatever data structure we want BUT whatever data structure is returned from this function must be "plug compatible" with the function described below (process_requests). In other words, the output of this function must be a valid input to process_requests.

process_requests(travelers: <<whatever data structure we chose>>, request_file_name: str)
This function takes two parameters: (1) data structure produced by load_travelers and (2) a bookings request file name. The bookings request file contains a set of booking request from our alien friends trying to grab a week at the apartment. If a request is successful, this function should orchestrate the reservation for our alien customer and (create if necessary) update a file named bookings.txt. If the week requested is already booked OR if the alien customer does not have enough credits, the bookings.txt file should not be modified.  

BnB Fees: Charge 500 credits for each week booked.

How does this all work?
First, understand that we will be calling the process_requests function like this:
process_requests(load_travelers("travelers_file_name.txt"), "request_file_name.txt")

So again, the data representation we choose for our implementation is entirely our preference.

Here is a description of the data we'll encounter in our files:

---
travelers.txt -
Spaznitz Sputnzzz@1QZZ44@1000
Veloxi Elomani@44444A7@1500
MechanSpeck@734577AHA@50
Ulmari Inmari Onmari@IIIAIII4III@20000
Klomax Bro@ABC273@1200
ZzzzNap@ZZ-ZZ-ZZZ9@3399
Veloxi Elomani@TheGreater0ne@1
---

Travelers: Any travelers files we give we will be formatted like the above. The name of the customer is first, their user ID is second and the number of galactic credits in their account. Each field is separated by the @ sign, so we'll need to split the component pieces as we process the file

---
requests.txt
10ZZ44		5
10ZZ44		2
IIIAIIIAIII	2
ABC273		3
ZZ-ZZ-ZZZ9	9
734577AHA	1
ZZ-ZZ-ZZZ9	9
ZZ-ZZ-ZZZ9	9
ITIAIIIAIII	10
---


Requests: Request files have two columns separated by space. The first column is the customer ID (which is the same ID used in the travelers file) and the second column is the requested week the alien wants to book. We should process these requests in sequential order, first to last. Therefore, if customer 1QZZ44 successfully books week 2, III4III4III will not be able to book the same week, even if they have sufficient funds to do so.

---
bookings.txt
5 - 10ZZ44 - Spaznitz Sputnzzz
2 - 10ZZ44 - Spaznitz Sputnzzz
3 - ABC273 - Klomax Bro
9 - ZZ-ZZ-ZZZ9 - zzzzNap
10 - IIIIIIIII - Ulmari Inmari Onmari
---

The bookings.txt is the output file that our program will produce. It has 3 columns separated by " - ". The first column is the week that was booked, the second column is the customer ID and  the third column is the customer name. The file we produce should be modeled after this format. We can use a dictionary.


Notes:

When we successfully book for a customer, we do NOT need to update the travelers.txt file to reflect the change in the alien's account balance. Our Home Office on Mars will handle the financial reconciliation on a nightly basis after we ship them our bookings file.  
However, we DO need to keep track of the traveler's account balance in memory while our program is running. After we successfully book a week, ensure we deduct the galactic credits from the alien's account. We must prevent a week from being booked if an alien has insufficient funds!

No UI is required. Minimal output statements indicating our processing is complete is welcome so we know our program actually did what we promised, but extensive print statements are not appropriate. Here's our single python output from our version of the program:

Finished processing reservations. Beam us up Scottie!
>>>

Let's remember to handle any file exceptions using Pythonâ€™s exception handling mechanism  and/or through the use of "defensive programming". We will validate that our code can handle non-existent files gracefully.


Interesting Tidbit

This project gives us some experience with "plug compatibility". We own both the "source" and "consumer" of the data structure we'll use for travelers so our task is simplified and the function chaining match between process_requests & load_travelers "just works". But what if load_travelers was written by another team of developers, and they changed the data representation? To maintain plug-compatibility, we would need to create some "glue" code that we typically call "adaptors".